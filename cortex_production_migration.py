#!/usr/bin/env python3
"""
CORTEX v2.1 Production-Ready Migration Script
–° –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –±—ç–∫–∞–ø–æ–º –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import os
import re
import json
import shutil
import logging
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List
from concurrent.futures import ThreadPoolExecutor
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler(
            'cortex_migration.log',
            maxBytes=1024 * 1024,  # 1 MB
            backupCount=5
        ),
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

class CortexProductionMigrator:
    def __init__(self, dry_run=True, create_backup=True):
        self.dry_run = dry_run
        self.create_backup = create_backup
        self.start_time = time.time()
        self.migration_log = []
        self.stats = {
            'files_analyzed': 0,
            'files_migrated': 0,
            'errors': 0,
            'distribution': {}
        }
        
        self.ROUTING_RULES = {
            r'autosave.*\.md$': 'cortex-memory',
            r'session.*\.md$': 'cortex-memory', 
            r'brain-index.*\.md$': 'cortex-memory',
            r'claude-.*\.md$': 'cortex-memory',
            r'userPreferences.*': 'KEEP_IN_EYES',
            r'README\.md$': 'KEEP_IN_EYES',
            r'\.gitignore$': 'KEEP_IN_EYES',
            r'CORTEX.*\.md$': 'KEEP_IN_EYES'
        }
        
        logger.info("=" * 60)
        logger.info("CORTEX v2.1 Production Migrator initialized")
        logger.info(f"Mode: {'DRY RUN' if dry_run else 'PRODUCTION'}")
        logger.info(f"Backup: {'ENABLED' if create_backup else 'DISABLED'}")
        logger.info("=" * 60)
    
    def backup_repository(self, repo_path: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not self.create_backup:
            logger.warning("Backup disabled, skipping...")
            return None
            
        backup_name = f"{repo_path}-BACKUP-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        
        try:
            logger.info(f"Creating backup: {backup_name}")
            shutil.copytree(repo_path, backup_name, ignore=shutil.ignore_patterns('.git'))
            logger.info(f"‚úÖ Backup created successfully: {backup_name}")
            return backup_name
        except Exception as e:
            logger.error(f"‚ùå Backup failed: {e}")
            raise
    
    def analyze_file(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ñ–∞–π–ª–∞"""
        filename = os.path.basename(file_path)
        
        for pattern, target in self.ROUTING_RULES.items():
            if re.search(pattern, filename, re.IGNORECASE):
                return target
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤ –ø–∞–º—è—Ç—å
        return 'cortex-memory'
    
    def migrate_file(self, source_path: str, target_repo: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞"""
        try:
            if self.dry_run:
                logger.info(f"[DRY RUN] Would migrate: {source_path} ‚Üí {target_repo}")
                return True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            target_base = f"../{target_repo}"
            os.makedirs(target_base, exist_ok=True)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—É—Ç–∏
            relative_path = os.path.relpath(source_path, ".")
            target_path = os.path.join(target_base, relative_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ —á–µ–º move)
            shutil.copy2(source_path, target_path)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            os.remove(source_path)
            
            logger.info(f"‚úÖ Migrated: {relative_path} ‚Üí {target_repo}")
            self.stats['files_migrated'] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error migrating {source_path}: {e}")
            self.stats['errors'] += 1
            return False
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        eyes_path = "."
        
        logger.info("Starting CORTEX v2.1 Migration...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        if self.create_backup and not self.dry_run:
            backup_path = self.backup_repository(eyes_path)
            if not backup_path:
                logger.error("Backup failed, aborting migration")
                return
        
        # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_tasks = []
        
        for root, dirs, files in os.walk(eyes_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .git –∏ –±—ç–∫–∞–ø—ã
            if '.git' in root or 'BACKUP' in root:
                continue
                
            for file in files:
                file_path = os.path.join(root, file)
                self.stats['files_analyzed'] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                target_repo = self.analyze_file(file_path)
                
                if target_repo != 'KEEP_IN_EYES':
                    migration_tasks.append((file_path, target_repo))
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    if target_repo not in self.stats['distribution']:
                        self.stats['distribution'][target_repo] = 0
                    self.stats['distribution'][target_repo] += 1
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
        if migration_tasks and not self.dry_run:
            logger.info(f"Migrating {len(migration_tasks)} files using 4 threads...")
            
            with ThreadPoolExecutor(max_workers=4) as executor:
                futures = []
                for file_path, target_repo in migration_tasks:
                    futures.append(
                        executor.submit(self.migrate_file, file_path, target_repo)
                    )
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for future in futures:
                    future.result()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        self.generate_report()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elapsed_time = time.time() - self.start_time
        logger.info("=" * 60)
        logger.info("MIGRATION COMPLETED!")
        logger.info(f"‚è±Ô∏è  Time elapsed: {elapsed_time:.2f} seconds")
        logger.info(f"üìä Files analyzed: {self.stats['files_analyzed']}")
        logger.info(f"üìä Files migrated: {self.stats['files_migrated']}")
        logger.info(f"‚ùå Errors: {self.stats['errors']}")
        logger.info("=" * 60)
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á—ë—Ç–∞"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'mode': 'dry_run' if self.dry_run else 'production',
            'stats': self.stats,
            'cortex_version': '2.1',
            'elapsed_time': time.time() - self.start_time
        }
        
        report_file = f"migration_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"üìã Report saved: {report_file}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='CORTEX v2.1 Migration Tool')
    parser.add_argument('--production', action='store_true', 
                       help='Run in production mode (actually move files)')
    parser.add_argument('--no-backup', action='store_true',
                       help='Disable backup creation')
    
    args = parser.parse_args()
    
    migrator = CortexProductionMigrator(
        dry_run=not args.production,
        create_backup=not args.no_backup
    )
    
    migrator.run_migration()