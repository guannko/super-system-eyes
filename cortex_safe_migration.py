#!/usr/bin/env python3
"""
CORTEX v2.1 Safe Migration Script
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å dry-run –∏ backup
"""

import os
import re
import json
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple

class CortexSafeMigrator:
    def __init__(self, dry_run=True):
        self.dry_run = dry_run
        self.migration_log = []
        self.stats = {
            'files_analyzed': 0,
            'would_migrate': 0,
            'distribution': {}
        }
        
        self.ROUTING_RULES = {
            r'autosave.*\.md$': 'autosaves',
            r'session.*\.md$': 'autosaves', 
            r'brain-index.*\.md$': 'autosaves',
            r'userPreferences.*': 'KEEP_IN_EYES',  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ eyes
            r'README\.md$': 'KEEP_IN_EYES',
            r'\.gitignore$': 'KEEP_IN_EYES'
        }
    
    def analyze_file(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ñ–∞–π–ª–æ–º"""
        filename = os.path.basename(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern, action in self.ROUTING_RULES.items():
            if re.search(pattern, filename, re.IGNORECASE):
                return action
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ eyes
        return 'KEEP_IN_EYES'
    
    def scan_repository(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç super-system-eyes –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ"""
        eyes_path = "."  # –ú—ã —É–∂–µ –≤ super-system-eyes
        
        print("üîç CORTEX v2.1 - –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è super-system-eyes")
        print("=" * 60)
        
        for root, dirs, files in os.walk(eyes_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .git
            if '.git' in root:
                continue
                
            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, eyes_path)
                
                self.stats['files_analyzed'] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                action = self.analyze_file(file_path)
                
                if action != 'KEEP_IN_EYES':
                    self.stats['would_migrate'] += 1
                    
                    if action not in self.stats['distribution']:
                        self.stats['distribution'][action] = []
                    
                    self.stats['distribution'][action].append(relative_path)
                    
                    if self.dry_run:
                        print(f"  üìÑ {relative_path}")
                        print(f"     ‚Üí Would move to: {action}/")
        
        # –û—Ç—á—ë—Ç
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù:")
        print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.stats['files_analyzed']}")
        print(f"  –ë—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {self.stats['would_migrate']}")
        print(f"  –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ eyes: {self.stats['files_analyzed'] - self.stats['would_migrate']}")
        
        if self.stats['distribution']:
            print("\nüì¶ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
            for target, files in self.stats['distribution'].items():
                print(f"  {target}: {len(files)} —Ñ–∞–π–ª–æ–≤")
                if len(files) <= 5:
                    for f in files:
                        print(f"    - {f}")
                else:
                    for f in files[:3]:
                        print(f"    - {f}")
                    print(f"    ... –∏ –µ—â—ë {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
        
        return self.stats

if __name__ == "__main__":
    print("üß† CORTEX v2.1 - Safe Migration Scanner")
    print("Mode: DRY RUN (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)")
    print("")
    
    migrator = CortexSafeMigrator(dry_run=True)
    stats = migrator.scan_repository()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'mode': 'dry_run',
        'stats': stats
    }
    
    with open('migration_dry_run_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print("\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ migration_dry_run_report.json")
    print("üîí –≠—Ç–æ –±—ã–ª DRY RUN - –Ω–∏–∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã")